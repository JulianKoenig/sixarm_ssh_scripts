#!/bin/bash
set -euf -o pipefail

##
# SSH script to generate our typical key:
#
#   * Type: use the RSA algorithm because it's the widest used.
#   * Bits: use 4096 because it's stronger than default 2048.
#   * Comment: use the email address in case contact is needed.
#   * Passphrase: none because we're using this for automation.
#
# File name convention:
#
#   * Start with the email address, so a user's keys will sort together.
#   * Generate an XID (a.k.a. UUID with just letters and numbers).
#   * Set the file name to "<email>=<xid>=id_rsa"
#
# Example:
#
#     ssh-keygen-with-email-fingerprint-file-name alice@example.com
#
# Output files:
#
#     alice@example.com=34150d8e0d19ddbaec70d2e600166876=id_rsa
#     alice@example.com=34150d8e0d19ddbaec70d2e600166876=id_rsa.pub
#
# Author: Joel Parker Henderson (joel@joelparkerhenderson.com)
# License: GPL
# Updated: 2015-12-20
##

email="$1"
shift

## Conf
type=rsa
bits=4096
comment="$email"
passphrase=""
xid=`hexdump -n 16 -v -e '16/1 "%02x" "\n"' /dev/random`

## Temporaries
tmp_dir=$(mktemp -d -t `basename $0`)
tmp_basename="id_$type"
tmp_file="$tmp_dir/$tmp_basename"

## Destinations
out_dir=""
out_basename="$email=$xid=id_$type"
out_file="$out_basename"

## Create key
ssh-keygen -t "$type" -b "$bits" -C "$comment" -N "$passphrase" -f "$tmp_file" "$@"
mv "$tmp_file" "$out_file"
mv "$tmp_file.pub" "$out_file.pub"

## Tell the user what we've created
echo "$out_file"
echo "$out_file.pub"
